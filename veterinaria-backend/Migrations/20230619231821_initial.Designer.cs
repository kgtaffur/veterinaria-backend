// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using veterinaria_backend.Models;

#nullable disable

namespace veterinaria_backend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230619231821_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("veterinaria_backend.Models.CitaMedica", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("HistorialMedicoId")
                        .HasColumnType("int");

                    b.Property<string>("consultorio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("horaCita")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("HistorialMedicoId");

                    b.ToTable("CitaMedicas");
                });

            modelBuilder.Entity("veterinaria_backend.Models.FichaMedica", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime>("Actualizacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Color_mucosas")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Genitales")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HistorialMedicoId")
                        .HasColumnType("int");

                    b.Property<string>("Observaciones")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Palpitacion_abdominal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pulso_femoral")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Registro")
                        .HasColumnType("datetime2");

                    b.Property<float>("Temperatura")
                        .HasColumnType("real");

                    b.HasKey("id");

                    b.HasIndex("HistorialMedicoId");

                    b.ToTable("FichaMedicas");
                });

            modelBuilder.Entity("veterinaria_backend.Models.HistorialMedico", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("paciente_mascota_id")
                        .HasColumnType("int");

                    b.Property<int>("propietario_id")
                        .HasColumnType("int");

                    b.Property<string>("vacunas_desparacitaciones")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("HistorialMedicas");
                });

            modelBuilder.Entity("veterinaria_backend.Models.Medico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Educacion")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Especialidad")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Experiencia")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("usuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("usuarioId");

                    b.ToTable("Medicos");
                });

            modelBuilder.Entity("veterinaria_backend.Models.Paciente", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("edad")
                        .HasColumnType("int");

                    b.Property<int>("historialMedicoId")
                        .HasColumnType("int");

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("peso")
                        .HasColumnType("real");

                    b.Property<string>("raza")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sexo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("specie")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("historialMedicoId")
                        .IsUnique();

                    b.ToTable("Pacientes");
                });

            modelBuilder.Entity("veterinaria_backend.Models.Personal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Cargo")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Horario")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("usuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("usuarioId");

                    b.ToTable("Personal");
                });

            modelBuilder.Entity("veterinaria_backend.Models.Propietario", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("apellido")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("direccion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("historialMedicoId")
                        .HasColumnType("int");

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("telefono")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("historialMedicoId")
                        .IsUnique();

                    b.ToTable("Propietario");
                });

            modelBuilder.Entity("veterinaria_backend.Models.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("veterinaria_backend.Models.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ContraseñaHash")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("rolId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("rolId");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("veterinaria_backend.Models.CitaMedica", b =>
                {
                    b.HasOne("veterinaria_backend.Models.HistorialMedico", "historialMedico")
                        .WithMany()
                        .HasForeignKey("HistorialMedicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("historialMedico");
                });

            modelBuilder.Entity("veterinaria_backend.Models.FichaMedica", b =>
                {
                    b.HasOne("veterinaria_backend.Models.HistorialMedico", "historialMedico")
                        .WithMany()
                        .HasForeignKey("HistorialMedicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("historialMedico");
                });

            modelBuilder.Entity("veterinaria_backend.Models.Medico", b =>
                {
                    b.HasOne("veterinaria_backend.Models.Usuario", "usuario")
                        .WithMany()
                        .HasForeignKey("usuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("usuario");
                });

            modelBuilder.Entity("veterinaria_backend.Models.Paciente", b =>
                {
                    b.HasOne("veterinaria_backend.Models.HistorialMedico", "historialMedico")
                        .WithOne("pacienteMascota")
                        .HasForeignKey("veterinaria_backend.Models.Paciente", "historialMedicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("historialMedico");
                });

            modelBuilder.Entity("veterinaria_backend.Models.Personal", b =>
                {
                    b.HasOne("veterinaria_backend.Models.Usuario", "usuario")
                        .WithMany()
                        .HasForeignKey("usuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("usuario");
                });

            modelBuilder.Entity("veterinaria_backend.Models.Propietario", b =>
                {
                    b.HasOne("veterinaria_backend.Models.HistorialMedico", "historialMedico")
                        .WithOne("propietario")
                        .HasForeignKey("veterinaria_backend.Models.Propietario", "historialMedicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("historialMedico");
                });

            modelBuilder.Entity("veterinaria_backend.Models.Usuario", b =>
                {
                    b.HasOne("veterinaria_backend.Models.Rol", "rol")
                        .WithMany()
                        .HasForeignKey("rolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("rol");
                });

            modelBuilder.Entity("veterinaria_backend.Models.HistorialMedico", b =>
                {
                    b.Navigation("pacienteMascota")
                        .IsRequired();

                    b.Navigation("propietario")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
